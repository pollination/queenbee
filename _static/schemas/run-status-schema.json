{"title": "RunStatus", "description": "Job Status.", "type": "object", "properties": {"type": {"title": "Type", "default": "RunStatus", "pattern": "^RunStatus$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "inputs": {"title": "Inputs", "description": "The inputs used for this run.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/StepStringInput"}, {"$ref": "#/definitions/StepIntegerInput"}, {"$ref": "#/definitions/StepNumberInput"}, {"$ref": "#/definitions/StepBooleanInput"}, {"$ref": "#/definitions/StepFolderInput"}, {"$ref": "#/definitions/StepFileInput"}, {"$ref": "#/definitions/StepPathInput"}, {"$ref": "#/definitions/StepArrayInput"}, {"$ref": "#/definitions/StepJSONObjectInput"}]}}, "outputs": {"title": "Outputs", "description": "The outputs produced by this run.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/StepStringOutput"}, {"$ref": "#/definitions/StepIntegerOutput"}, {"$ref": "#/definitions/StepNumberOutput"}, {"$ref": "#/definitions/StepBooleanOutput"}, {"$ref": "#/definitions/StepFolderOutput"}, {"$ref": "#/definitions/StepFileOutput"}, {"$ref": "#/definitions/StepPathOutput"}, {"$ref": "#/definitions/StepArrayOutput"}, {"$ref": "#/definitions/StepJSONObjectOutput"}]}}, "message": {"title": "Message", "description": "Any message produced by the task. Usually error/debugging hints.", "type": "string"}, "started_at": {"title": "Started At", "description": "The time at which the task was started", "type": "string", "format": "date-time"}, "finished_at": {"title": "Finished At", "description": "The time at which the task was completed", "type": "string", "format": "date-time"}, "source": {"title": "Source", "description": "Source url for the status object. It can be a recipe or a function.", "type": "string"}, "api_version": {"title": "Api Version", "default": "v1beta1", "readOnly": true, "pattern": "^v1beta1$", "type": "string"}, "id": {"title": "Id", "description": "The ID of the individual run.", "type": "string"}, "job_id": {"title": "Job Id", "description": "The ID of the job that generated this run.", "type": "string"}, "entrypoint": {"title": "Entrypoint", "description": "The ID of the first step in the run.", "type": "string"}, "status": {"description": "The status of this run.", "default": "Unknown", "allOf": [{"$ref": "#/definitions/RunStatusEnum"}]}, "steps": {"title": "Steps", "default": {}, "type": "object", "additionalProperties": {"$ref": "#/definitions/StepStatus"}}}, "required": ["inputs", "outputs", "started_at", "id", "job_id"], "definitions": {"IOAliasHandler": {"title": "IOAliasHandler", "description": "Input and output alias handler object.", "type": "object", "properties": {"type": {"title": "Type", "default": "IOAliasHandler", "pattern": "^IOAliasHandler$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "language": {"title": "Language", "description": "Declare the language (e.g. python, csharp, etc.). This option allows the recipe to be flexible on handling different programming languages.", "type": "string"}, "module": {"title": "Module", "description": "Target module or namespace to load the alias function.", "example": "honeybee_rhino.handlers", "type": "string"}, "function": {"title": "Function", "description": "Name of the function. The input value will be passed to this function as the first argument.", "type": "string"}, "index": {"title": "Index", "description": "An integer to set the index for the order of execution. This input is only useful when there are more than one handler for the same platform and the output of one handler should be passed to another handler. This is also called chained handlers. By default all the handlers are indexed as 0 assuming they are not chained.", "default": 0, "type": "integer"}}, "required": ["language", "module", "function"]}, "DAGGenericInputAlias": {"title": "DAGGenericInputAlias", "description": "Base class for DAG Alias inputs.\n\nThis class adds a handler to input to handle the process of loading the input\nfrom different graphical interfaces.", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGGenericInputAlias", "pattern": "^DAGGenericInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "Default value for generic input.", "type": "string"}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}}, "required": ["name", "platform", "handler"]}, "DAGStringInputAlias": {"title": "DAGStringInputAlias", "description": "An Alias String input.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/string.html#string for\nmore information.\n\n.. code-block:: python\n\n    \"schema\": {\n        \"type\": \"string\",\n        \"maxLength\": 50,\n        \"pattern\": \"(?i)(^.*\\.epw$)\"\n    }", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGStringInputAlias", "pattern": "^DAGStringInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "string"}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}}, "required": ["name", "platform", "handler"]}, "DAGIntegerInputAlias": {"title": "DAGIntegerInputAlias", "description": "An alias integer input.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/numeric.html#numeric\nfor more information.", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGIntegerInputAlias", "pattern": "^DAGIntegerInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "integer"}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}}, "required": ["name", "platform", "handler"]}, "DAGNumberInputAlias": {"title": "DAGNumberInputAlias", "description": "An alias number input.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/numeric.html#numeric\nfor more information.", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGNumberInputAlias", "pattern": "^DAGNumberInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "number"}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}}, "required": ["name", "platform", "handler"]}, "DAGBooleanInputAlias": {"title": "DAGBooleanInputAlias", "description": "The boolean type matches only two special values: True and False.\n\nNote that values that evaluate to true or false, such as 1 and 0, are not accepted.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/boolean.html for more\ninformation.", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGBooleanInputAlias", "pattern": "^DAGBooleanInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "boolean"}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}}, "required": ["name", "platform", "handler"]}, "HTTP": {"title": "HTTP", "description": "HTTP Source\n\nA web HTTP to an FTP server or an API for example.", "type": "object", "properties": {"type": {"title": "Type", "default": "HTTP", "pattern": "^HTTP$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "url": {"title": "Url", "description": "For a HTTP endpoint this can be http://climate.onebuilding.org.", "type": "string"}}, "required": ["url"]}, "S3": {"title": "S3", "description": "S3 Source\n\nAn S3 bucket artifact Source.", "type": "object", "properties": {"type": {"title": "Type", "default": "S3", "pattern": "^S3$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "key": {"title": "Key", "description": "The path inside the bucket to source artifacts from.", "type": "string"}, "endpoint": {"title": "Endpoint", "description": "The HTTP endpoint to reach the S3 bucket.", "type": "string"}, "bucket": {"title": "Bucket", "description": "The name of the S3 bucket on the host server.", "type": "string"}, "credentials_path": {"title": "Credentials Path", "description": "Path to the file holding the AccessKey and SecretAccessKey to authenticate to the bucket. Assumes public bucket access if none are specified.", "type": "string"}}, "required": ["key", "endpoint", "bucket"]}, "ProjectFolder": {"title": "ProjectFolder", "description": "Project Folder Source\n\nThis is the path to a folder where files and folders can be sourced. In the context\nof a desktop run Workflow this folder will correspond to a local folder. In the\ncontext of a workflow run on Pollination this folder will correspond to a Project\nscoped folder.", "type": "object", "properties": {"type": {"title": "Type", "default": "ProjectFolder", "pattern": "^ProjectFolder$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "path": {"title": "Path", "description": "The path to a folder where files and folders can be sourced. For a local filesystem this can be \"C:\\Users\\me\\jobs\\test\".", "type": "string"}}}, "DAGFolderInputAlias": {"title": "DAGFolderInputAlias", "description": "An alias folder input.\n\nFolder is a special string input. Unlike other string inputs, a folder will be copied\nfrom its location to execution folder when a workflow is executed.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/string.html#string for\nmore information.\n\n.. code-block:: python\n\n    \"schema\": {\n        \"type\": \"string\",\n        \"maxLength\": 50,\n    }", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGFolderInputAlias", "pattern": "^DAGFolderInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "The default source for file if the value is not provided.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}}, "required": ["name", "platform", "handler"]}, "DAGFileInputAlias": {"title": "DAGFileInputAlias", "description": "An alias file input.\n\nFile is a special string input. Unlike other string inputs, a file will be copied\nfrom its location to execution folder when a workflow is executed.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/string.html#string for\nmore information.\n\n.. code-block:: python\n\n    # a file with maximum 50 characters with an ``epw`` extension.\n\n    \"schema\": {\n        \"type\": \"string\",\n        \"maxLength\": 50,\n        \"pattern\": \"(?i)(^.*\\.epw$)\"\n    }", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGFileInputAlias", "pattern": "^DAGFileInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "The default source for file if the value is not provided.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "extensions": {"title": "Extensions", "description": "Optional list of extensions for file. The check for extension is case-insensitive.", "type": "array", "items": {"type": "string"}}}, "required": ["name", "platform", "handler"]}, "DAGPathInputAlias": {"title": "DAGPathInputAlias", "description": "A file or a folder input.\n\nUse this input only in cases that the input can be either a file or folder. For file\nor folder-only inputs see File and Folder.\n\nPath is a special string input. Unlike other string inputs, a path will be copied\nfrom its location to execution folder when a workflow is executed.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/string.html#string for\nmore information.\n\n.. code-block:: python\n\n    # a file with maximum 50 characters with an ``epw`` extension.\n\n    \"schema\": {\n        \"type\": \"string\",\n        \"maxLength\": 50,\n        \"pattern\": \"(?i)(^.*\\.epw$)\"\n    }", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGPathInputAlias", "pattern": "^DAGPathInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "The default source for file if the value is not provided.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "extensions": {"title": "Extensions", "description": "Optional list of extensions for path. The check for extension is case-insensitive. The extension will only be validated for file inputs.", "type": "array", "items": {"type": "string"}}}, "required": ["name", "platform", "handler"]}, "ItemType": {"title": "ItemType", "description": "Type enum for items in a list.\n\nItems can not be files or folder. For a list of files you should copy them to a\nfolder and use FolderInput input instead of using ArrayInput.", "enum": ["Generic", "String", "Integer", "Number", "Boolean", "Array", "JSONObject"], "type": "string"}, "DAGArrayInputAlias": {"title": "DAGArrayInputAlias", "description": "A JSON array input.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/array.html for\nmore information.", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGArrayInputAlias", "pattern": "^DAGArrayInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "array", "items": {}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "items_type": {"description": "Type of items in an array. All the items in an array must be from the same type.", "default": "String", "allOf": [{"$ref": "#/definitions/ItemType"}]}}, "required": ["name", "platform", "handler"]}, "DAGJSONObjectInputAlias": {"title": "DAGJSONObjectInputAlias", "description": "An alias JSON object input.\n\nJSON objects are similar to Python dictionaries.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/object.html for\nmore information.", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGJSONObjectInputAlias", "pattern": "^DAGJSONObjectInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "object"}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}}, "required": ["name", "platform", "handler"]}, "DAGLinkedInputAlias": {"title": "DAGLinkedInputAlias", "description": "An Alias for Linked Inputs.\n\nA linked input alias will be hidden in the UI and will be linked to an object in \nthe UI using the input handler.", "type": "object", "properties": {"type": {"title": "Type", "default": "DAGLinkedInputAlias", "pattern": "^DAGLinkedInputAlias$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "platform": {"title": "Platform", "description": "Name of the client platform (e.g. Grasshopper, Revit, etc). The value can be any strings as long as it has been agreed between client-side developer and author of the recipe.", "type": "array", "items": {"type": "string"}}, "handler": {"title": "Handler", "description": "List of process actions to process the input or output value.", "type": "array", "items": {"$ref": "#/definitions/IOAliasHandler"}}, "default": {"title": "Default", "description": "Default value for generic input.", "type": "string"}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}}, "required": ["name", "platform", "handler"]}, "StepStringInput": {"title": "StepStringInput", "description": "A String input.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepStringInput", "pattern": "^StepStringInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "string"}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "value": {"title": "Value", "type": "string"}}, "required": ["name", "value"]}, "StepIntegerInput": {"title": "StepIntegerInput", "description": "An integer input.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepIntegerInput", "pattern": "^StepIntegerInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "integer"}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "value": {"title": "Value", "type": "integer"}}, "required": ["name", "value"]}, "StepNumberInput": {"title": "StepNumberInput", "description": "A number input.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepNumberInput", "pattern": "^StepNumberInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "number"}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "value": {"title": "Value", "type": "number"}}, "required": ["name", "value"]}, "StepBooleanInput": {"title": "StepBooleanInput", "description": "The boolean type matches only two special values: True and False.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepBooleanInput", "pattern": "^StepBooleanInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "boolean"}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "value": {"title": "Value", "type": "boolean"}}, "required": ["name", "value"]}, "StepFolderInput": {"title": "StepFolderInput", "description": "A folder input.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepFolderInput", "pattern": "^StepFolderInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "The default source for file if the value is not provided.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "path": {"title": "Path", "description": "Path to the target location that the input will be copied to.  This path is relative to the working directory where the command is executed.", "type": "string"}, "source": {"title": "Source", "description": "The path to source the file from.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}}, "required": ["name", "source"]}, "StepFileInput": {"title": "StepFileInput", "description": "A file input.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepFileInput", "pattern": "^StepFileInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "The default source for file if the value is not provided.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "path": {"title": "Path", "description": "Path to the target location that the input will be copied to.  This path is relative to the working directory where the command is executed.", "type": "string"}, "extensions": {"title": "Extensions", "description": "Optional list of extensions for file. The check for extension is case-insensitive.", "type": "array", "items": {"type": "string"}}, "source": {"title": "Source", "description": "The path to source the file from.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}}, "required": ["name", "source"]}, "StepPathInput": {"title": "StepPathInput", "description": "A file or a folder input.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepPathInput", "pattern": "^StepPathInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "The default source for file if the value is not provided.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "path": {"title": "Path", "description": "Path to the target location that the input will be copied to.  This path is relative to the working directory where the command is executed.", "type": "string"}, "extensions": {"title": "Extensions", "description": "Optional list of extensions for file. The check for extension is case-insensitive.", "type": "array", "items": {"type": "string"}}, "source": {"title": "Source", "description": "The path to source the file from.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}}, "required": ["name", "source"]}, "StepArrayInput": {"title": "StepArrayInput", "description": "A JSON array input.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepArrayInput", "pattern": "^StepArrayInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "array", "items": {}}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "items_type": {"description": "Type of items in an array. All the items in an array must be from the same type.", "default": "String", "allOf": [{"$ref": "#/definitions/ItemType"}]}, "value": {"title": "Value", "type": "array", "items": {}}}, "required": ["name", "value"]}, "StepJSONObjectInput": {"title": "StepJSONObjectInput", "description": "A JSON object input.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepJSONObjectInput", "pattern": "^StepJSONObjectInput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Input name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for input.", "type": "string"}, "default": {"title": "Default", "description": "Default value to use for an input if a value was not supplied.", "type": "object"}, "alias": {"title": "Alias", "description": "A list of aliases for this input in different platforms.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/DAGGenericInputAlias"}, {"$ref": "#/definitions/DAGStringInputAlias"}, {"$ref": "#/definitions/DAGIntegerInputAlias"}, {"$ref": "#/definitions/DAGNumberInputAlias"}, {"$ref": "#/definitions/DAGBooleanInputAlias"}, {"$ref": "#/definitions/DAGFolderInputAlias"}, {"$ref": "#/definitions/DAGFileInputAlias"}, {"$ref": "#/definitions/DAGPathInputAlias"}, {"$ref": "#/definitions/DAGArrayInputAlias"}, {"$ref": "#/definitions/DAGJSONObjectInputAlias"}, {"$ref": "#/definitions/DAGLinkedInputAlias"}]}}, "required": {"title": "Required", "description": "A field to indicate if this input is required. This input needs to be set explicitly even when a default value is provided.", "default": false, "type": "boolean"}, "spec": {"title": "Spec", "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.", "type": "object"}, "value": {"title": "Value", "type": "object"}}, "required": ["name", "value"]}, "StepStringOutput": {"title": "StepStringOutput", "description": "A String output.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepStringOutput", "pattern": "^StepStringOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output file relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "value": {"title": "Value", "type": "string"}}, "required": ["name", "path", "value"]}, "StepIntegerOutput": {"title": "StepIntegerOutput", "description": "An integer output.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepIntegerOutput", "pattern": "^StepIntegerOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output file relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "value": {"title": "Value", "type": "integer"}}, "required": ["name", "path", "value"]}, "StepNumberOutput": {"title": "StepNumberOutput", "description": "A number output.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepNumberOutput", "pattern": "^StepNumberOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output file relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "value": {"title": "Value", "type": "number"}}, "required": ["name", "path", "value"]}, "StepBooleanOutput": {"title": "StepBooleanOutput", "description": "The boolean type matches only two special values: True and False.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepBooleanOutput", "pattern": "^StepBooleanOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output file relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "value": {"title": "Value", "type": "boolean"}}, "required": ["name", "path", "value"]}, "StepFolderOutput": {"title": "StepFolderOutput", "description": "A folder output.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepFolderOutput", "pattern": "^StepFolderOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output folder relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "source": {"title": "Source", "description": "The path to source the file from.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}}, "required": ["name", "path", "source"]}, "StepFileOutput": {"title": "StepFileOutput", "description": "A file output.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepFileOutput", "pattern": "^StepFileOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output file relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "source": {"title": "Source", "description": "The path to source the file from.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}}, "required": ["name", "path", "source"]}, "StepPathOutput": {"title": "StepPathOutput", "description": "A file or a folder output.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepPathOutput", "pattern": "^StepPathOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output file or folder relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "source": {"title": "Source", "description": "The path to source the file from.", "anyOf": [{"$ref": "#/definitions/HTTP"}, {"$ref": "#/definitions/S3"}, {"$ref": "#/definitions/ProjectFolder"}]}}, "required": ["name", "path", "source"]}, "StepArrayOutput": {"title": "StepArrayOutput", "description": "A JSON array output.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepArrayOutput", "pattern": "^StepArrayOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output file relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "items_type": {"description": "Type of items in this array. All the items in an array must be from the same type.", "default": "String", "allOf": [{"$ref": "#/definitions/ItemType"}]}, "value": {"title": "Value", "type": "array", "items": {}}}, "required": ["name", "path", "value"]}, "StepJSONObjectOutput": {"title": "StepJSONObjectOutput", "description": "A JSON object output.", "type": "object", "properties": {"type": {"title": "Type", "default": "StepJSONObjectOutput", "pattern": "^StepJSONObjectOutput$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "name": {"title": "Name", "description": "Output name.", "type": "string"}, "description": {"title": "Description", "description": "Optional description for output.", "type": "string"}, "path": {"title": "Path", "description": "Path to the output file relative to where the function command is executed.", "type": "string"}, "required": {"title": "Required", "description": "A boolean to indicate if an artifact output is required. A False value makes the artifact optional.", "default": true, "type": "boolean"}, "value": {"title": "Value", "type": "object"}}, "required": ["name", "path", "value"]}, "RunStatusEnum": {"title": "RunStatusEnum", "description": "Enumaration of allowable status strings", "enum": ["Created", "Scheduled", "Running", "Post-Processing", "Failed", "Cancelled", "Succeeded", "Unknown"], "type": "string"}, "StepStatusEnum": {"title": "StepStatusEnum", "description": "Enumaration of allowable status strings", "enum": ["Scheduled", "Running", "Failed", "Succeeded", "Skipped", "Unknown"], "type": "string"}, "StatusType": {"title": "StatusType", "description": "Type enum for status type.", "enum": ["Function", "DAG", "Loop", "Container", "Unknown"], "type": "string"}, "StepStatus": {"title": "StepStatus", "description": "The Status of a Job Step", "type": "object", "properties": {"type": {"title": "Type", "default": "StepStatus", "pattern": "^StepStatus$", "type": "string"}, "annotations": {"title": "Annotations", "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.", "type": "object"}, "inputs": {"title": "Inputs", "description": "The inputs used by this step.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/StepStringInput"}, {"$ref": "#/definitions/StepIntegerInput"}, {"$ref": "#/definitions/StepNumberInput"}, {"$ref": "#/definitions/StepBooleanInput"}, {"$ref": "#/definitions/StepFolderInput"}, {"$ref": "#/definitions/StepFileInput"}, {"$ref": "#/definitions/StepPathInput"}, {"$ref": "#/definitions/StepArrayInput"}, {"$ref": "#/definitions/StepJSONObjectInput"}]}}, "outputs": {"title": "Outputs", "description": "The outputs produced by this step.", "type": "array", "items": {"anyOf": [{"$ref": "#/definitions/StepStringOutput"}, {"$ref": "#/definitions/StepIntegerOutput"}, {"$ref": "#/definitions/StepNumberOutput"}, {"$ref": "#/definitions/StepBooleanOutput"}, {"$ref": "#/definitions/StepFolderOutput"}, {"$ref": "#/definitions/StepFileOutput"}, {"$ref": "#/definitions/StepPathOutput"}, {"$ref": "#/definitions/StepArrayOutput"}, {"$ref": "#/definitions/StepJSONObjectOutput"}]}}, "message": {"title": "Message", "description": "Any message produced by the task. Usually error/debugging hints.", "type": "string"}, "started_at": {"title": "Started At", "description": "The time at which the task was started", "type": "string", "format": "date-time"}, "finished_at": {"title": "Finished At", "description": "The time at which the task was completed", "type": "string", "format": "date-time"}, "source": {"title": "Source", "description": "Source url for the status object. It can be a recipe or a function.", "type": "string"}, "id": {"title": "Id", "description": "The step unique ID", "type": "string"}, "name": {"title": "Name", "description": "A human readable name for the step. Usually defined by the DAG task name but can be extended if the step is part of a loop for example. This name is unique within the boundary of the DAG/Job that generated it.", "type": "string"}, "status": {"description": "The status of this step.", "default": "Unknown", "allOf": [{"$ref": "#/definitions/StepStatusEnum"}]}, "status_type": {"description": "The type of step this status is for. Can be \"Function\", \"DAG\" or \"Loop\"", "allOf": [{"$ref": "#/definitions/StatusType"}]}, "template_ref": {"title": "Template Ref", "description": "The name of the template that spawned this step", "type": "string"}, "command": {"title": "Command", "description": "The command used to run this step. Only applies to Function steps.", "type": "string"}, "boundary_id": {"title": "Boundary Id", "description": "This indicates the step ID of the associated template root             step in which this step belongs to. A DAG step will have the id of the             parent DAG for example.", "type": "string"}, "children_ids": {"title": "Children Ids", "description": "A list of child step IDs", "type": "array", "items": {"type": "string"}}, "outbound_steps": {"title": "Outbound Steps", "description": "A list of the last step to ran in the context of this step. In the case of a DAG or a job this will be the last step that has been executed. It will remain empty for functions.", "type": "array", "items": {"type": "string"}}}, "required": ["inputs", "outputs", "started_at", "id", "name", "status_type", "template_ref", "children_ids", "outbound_steps"]}}}